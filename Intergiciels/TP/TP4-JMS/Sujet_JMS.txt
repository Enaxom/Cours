TP JMS
L'objectif est la réalisation d'un service de messagerie instantanée (SMI) pouvant réunir un nombre quelconque de participants.

Chaque participant peut émettre des messages qui sont diffusés à l'ensemble des participants. Les messages ne sont pas mémorisés par le SMI. Seuls les participants présents sur le SMI reçoivent les messages émis.

On pourra envisager de réaliser deux versions de l'application :

une version simple, où chaque participant se connecte au SMI au lancement de l'application, puis lit/écrit directement les messages, et se déconnecte en quittant l'application.
une version plus évoluée, permettant les opérations suivantes, outre la lecture/écriture de messages :

Rejoindre : permet à un participant de se connecter au SMI.
Partir : permet à un participant de se déconnecter du SMI.
Lister : permet à un participant de connaître l'ensemble des participants connectés.
Fournitures
le TP utilise une implémentation minimale (et libre) de JMS : OpenJMS. Le site comporte une documentation et des exemples de base.

l'installation consistera essentiellement à télécharger et décompresser l'archive http://prdownloads.sourceforge.net/openjms/openjms-0.7.7-beta-1.zip, qui fournit l'implémentation de JMS et un sgbd utilisé pour les conteneurs de données. Le répertoire résultant de cette décompression sera désigné dans ce qui suit par $OPENJMS _ HOME
$OPENJMS _ HOME contient un fichier "docs/index.html" qui constitue le point d'entrée de la documentation
le fichier "$OPENJMS_HOME/config/openjms.xml" fournit la définition d'objets de communication initiaux (conteneurs de données (destinations) et fabriques de connexions). Cet ensemble d'objets sera créé au lancement du serveur OpenJMS, et pourra être complété à l'exécution, par l'intermédiaire de l'API d'administration de JMS.
les paramètres de base permettant la connexion de chaque application au service de nommage et au serveur JOpenMS se trouvent dans un fichier jndi.properties, qui doit se trouver dans le même répertorie que l'application. Les exemples fournis dans $OPENJMS _ HOME/examples contiennent ce fichier
télécharger l'archive TP _ JMS.tar fournie dans le cadre du TP. Cette archive contient deux répertoires :

un répertoire Hello, qui contient
Admin.java,une petite application qui utilise l'API d'administration de JMS pour créer une Queue et l'enregistrer dans le serveur JNDI sous le nom "maFile". La ConnectionFactory utilisée par l'application est par ailleurs nommée "ConnectionFactory" et définie dans le fichier $OPENJMS _ HOME/config/openjms.xml
HelloWorld.java : un petit exemple pour débuter. Les exemples fournis avec l'installation, dans le répertoire $OPENJMS _ HOME/examples sont similaires, mais plus complets.
les scripts de compilation (build.sh) et d'exécution (run.sh) de l'application, qui fixent les valeurs correctes pour le classpath et pour les paramètres d'appel.
les paramètres de base permettant la connexion au service de nommage et au serveur OpenJMS: jndi.properties
un répertoire SMI, contenant les scripts build.sh, run.sh et le fichier jndi.properties. Ce répertoire est destiné à contenir le code de l'application SMI.
Important : les scripts considèrent que le répertoire TP _ JMS est au même niveau que $OPENJMS _ HOME. Si ce n'est pas le cas, il faudra soit éditer les scripts, soit affecter la bonne valeur pour $OPENJMS_HOME.
À Faire
Télécharger, installer, et prendre rapidement en main l'intergiciel OpenJMS. Les examples fournis avec l'installation peuvent être brièvement étudiés.
Étudier et faire tourner HelloWorld, en lançant plusieurs instances simultanément.
Modifier Admin pour créer un Topic au lieu d'une Queue, et relancer avec plusieurs HelloWorld; observer la différence.
Réaliser l'application de SMI (version simple, puis version évoluée)
Compilation
lancer le script build.sh (attention : s'assurer que les scripts ont bien les droits d'exécution)
Exécution
enregistrer les objets des communication :
soit en éditant directement le fichier openjms.xml
soit, comme illustré par l'application Admin.java, en utilisant l'API d'administration de JMS
le fichier openjms.xml contient des objets de communication par défaut : queue1, topic1...
lancer le serveur JMS (script bin/startup.sh de $OPENJMS _ HOME)
lancer les classes avec le script run.sh : run.sh MaClasse arg0 arg1...
l'outil interactif fourni par OpenJMS (script bin/admin.sh de $OPENJMS_HOME) permet de voir les destinations créées
le script bin/shutdown.sh permet d'arrêter (proprement) le serveur OpenJMS